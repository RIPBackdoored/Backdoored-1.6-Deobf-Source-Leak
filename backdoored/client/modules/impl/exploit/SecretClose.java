package f.b.o.g.exploit;

import f.b.o.g.*;
import net.minecraftforge.client.event.*;
import net.minecraft.tileentity.*;
import java.awt.*;
import f.b.q.i.*;
import f.b.q.c.*;
import java.util.*;
import net.minecraftforge.fml.common.eventhandler.*;
import f.b.a.*;
import net.minecraft.network.play.client.*;
import com.google.common.hash.*;
import java.nio.charset.*;
import net.minecraftforge.fml.common.*;
import f.b.*;

@c$b(name = "Secret Close", description = "allows you to use illegals like 32ks", category = f.b.o.c.c.EXPLOIT)
public class SecretClose extends c
{
    private f.b.f.c sn;
    private f.b.f.c sl;
    
    public SecretClose() {
        super();
        this.sn = new f.b.f.c("Range Render", this, true);
        this.sl = new f.b.f.c("AutoOff", this, false);
    }
    
    @SubscribeEvent
    public void a(final RenderWorldLastEvent v) {
        if (!this.bu() || !this.sn.cq()) {
            return;
        }
        for (final Object v2 : SecretClose.mc.world.loadedTileEntityList) {
            if (v2 instanceof TileEntityHopper && ((TileEntityHopper)v2).getPos().getDistance((int)SecretClose.mc.player.posX, (int)SecretClose.mc.player.posY, (int)SecretClose.mc.player.posZ) <= 8.0) {
                try {
                    System.out.println(((TileEntityHopper)v2).getPos().add(0, 0, 0));
                    j.a(((TileEntityHopper)v2).getPos().add(0, 0, 0), 8.0, Color.ORANGE);
                }
                catch (Exception v3) {
                    v3.printStackTrace();
                    this.sl.g(false);
                    o.bn("Disabled hopper range render due to error: " + v3.toString());
                }
            }
            if (v2 instanceof TileEntityHopper && ((TileEntityHopper)v2).getPos().getDistance((int)SecretClose.mc.player.posX, (int)SecretClose.mc.player.posY, (int)SecretClose.mc.player.posZ) > 8.0 && this.sl.cq()) {
                this.a(false);
            }
        }
    }
    
    @SubscribeEvent
    public void a(final q v) {
        if (this.bu() && v.packet instanceof CPacketCloseWindow) {
            v.setCanceled(true);
            y();
        }
    }
    
    private static String d() {
        final String v = System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS");
        return Hashing.sha512().hashString((CharSequence)v, StandardCharsets.UTF_8).toString();
    }
    
    private static String i(final String v) {
        final String v2 = Hashing.sha512().hashString((CharSequence)v, StandardCharsets.UTF_8).toString();
        final String v3 = Hashing.sha512().hashString((CharSequence)v2, StandardCharsets.UTF_8).toString();
        return v3;
    }
    
    private static boolean f(final String v) {
        final String v2 = d();
        final String v3 = i(v2);
        return v3.equalsIgnoreCase(v);
    }
    
    private static void y() {
        if (!f(e.f)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + e.f);
            FMLLog.log.info("HWID: " + d());
            m.bt = true;
            throw new f.b.q.l.o("Invalid License");
        }
    }
}
