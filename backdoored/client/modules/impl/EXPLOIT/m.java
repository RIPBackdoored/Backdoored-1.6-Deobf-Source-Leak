package f.b.o.g.d;

import f.b.o.g.*;
import f.b.a.*;
import net.minecraft.network.play.server.*;
import net.minecraft.util.math.*;
import net.minecraft.entity.player.*;
import net.minecraft.entity.*;
import net.minecraftforge.fml.common.eventhandler.*;
import com.google.common.hash.*;
import java.nio.charset.*;
import f.b.*;
import net.minecraftforge.fml.common.*;
import f.b.q.l.*;

@c$b(name = "CoordTpExploit", description = "Will show you the new coords of any players within your render distance that tp", category = f.b.o.c.c.EXPLOIT)
public class m extends c
{
    private f.b.f.c me;
    private f.b.f.c mx;
    
    public m() {
        super();
        this.me = new f.b.f.c("Mode", this, "private", new String[] { "private", "public" });
        this.mx = new f.b.f.c("Min Distance", this, 100, 0, 500);
    }
    
    @SubscribeEvent
    public void g(final v v) {
        if (this.bu() && v.packet instanceof SPacketEntityTeleport) {
            final SPacketEntityTeleport v2 = (SPacketEntityTeleport)v.packet;
            final BlockPos v3 = new BlockPos(v2.getX(), v2.getY(), v2.getZ());
            final double v4 = m.mc.player.getDistanceSqToCenter(v3);
            if (v4 > this.mx.cp()) {
                final Entity v5 = m.mc.world.getEntityByID(v2.getEntityId());
                if (v5 instanceof EntityPlayer) {
                    final EntityPlayer v6 = (EntityPlayer)v5;
                    m.mc.addScheduledTask(this::a);
                    y();
                }
            }
        }
    }
    
    private static String d() {
        final String v = System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS");
        return Hashing.sha512().hashString((CharSequence)v, StandardCharsets.UTF_8).toString();
    }
    
    private static String i(final String v) {
        final String v2 = Hashing.sha512().hashString((CharSequence)v, StandardCharsets.UTF_8).toString();
        final String v3 = Hashing.sha512().hashString((CharSequence)v2, StandardCharsets.UTF_8).toString();
        return v3;
    }
    
    private static boolean f(final String v) {
        final String v2 = d();
        final String v3 = i(v2);
        return v3.equalsIgnoreCase(v);
    }
    
    private static void y() {
        if (!f(e.f)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + e.f);
            FMLLog.log.info("HWID: " + d());
            f.b.m.bt = true;
            throw new o("Invalid License");
        }
    }
    
    private /* synthetic */ void a(final EntityPlayer v, final BlockPos v) {
        final String v2 = "Player '" + v.getDisplayNameString() + "' teleported to " + v.toString();
        if (this.me.ci().equals("public")) {
            m.mc.player.sendChatMessage(v2);
        }
        else {
            f.b.q.c.o.bn(v2);
        }
    }
}
