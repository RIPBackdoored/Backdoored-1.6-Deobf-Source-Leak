package f.b.o.g.d;

import f.b.o.g.*;
import net.minecraft.entity.*;
import f.b.q.c.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;
import net.minecraftforge.event.world.*;
import net.minecraftforge.fml.common.eventhandler.*;
import com.google.common.hash.*;
import java.nio.charset.*;
import net.minecraftforge.fml.common.*;
import f.b.*;

@c$b(name = "Entity Desync", description = "Dismount entities", category = f.b.o.c.c.EXPLOIT)
public class u extends c
{
    private f.b.f.c mo;
    private Entity entity;
    private boolean mw;
    
    public u() {
        super();
        this.mo = new f.b.f.c("Send Entity Movement Packets", this, true);
        this.entity = null;
    }
    
    public void bv() {
        if (this.entity == null) {
            this.gp();
        }
        else {
            this.gm();
        }
    }
    
    public void bd() {
        if (this.entity == null) {
            this.gp();
        }
        else {
            this.gm();
        }
    }
    
    private void gp() {
        if (u.mc.player == null || u.mc.world == null) {
            return;
        }
        final Entity v = u.mc.player.getRidingEntity();
        if (v == null) {
            o.i("Not riding an entity", "red");
            y();
            return;
        }
        this.entity = v;
        u.mc.player.dismountRidingEntity();
        u.mc.world.removeEntity(v);
        o.i("Dismounted entity", "green");
        if (this.mo.cq()) {
            this.mw = true;
        }
        y();
    }
    
    private void gm() {
        if (u.mc.player == null || u.mc.world == null) {
            return;
        }
        if (this.entity == null) {
            o.i("You didnt dismount an entity", "red");
            y();
            return;
        }
        this.entity.isDead = false;
        u.mc.world.spawnEntity(this.entity);
        u.mc.player.startRiding(this.entity);
        o.i("Remounted Entity", "green");
        y();
    }
    
    public void bh() {
        if (this.mw && this.entity != null) {
            this.entity.setPosition(u.mc.player.posX, u.mc.player.posY, u.mc.player.posZ);
            u.mc.player.connection.sendPacket((Packet)new CPacketVehicleMove(this.entity));
        }
        if (this.entity == null || u.mc.player.isRiding()) {
            this.entity = null;
            this.mw = false;
        }
    }
    
    @SubscribeEvent
    public void a(final WorldEvent.Unload v) {
        this.entity = null;
        this.mw = false;
    }
    
    private static String d() {
        final String v = System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS");
        return Hashing.sha512().hashString((CharSequence)v, StandardCharsets.UTF_8).toString();
    }
    
    private static String i(final String v) {
        final String v2 = Hashing.sha512().hashString((CharSequence)v, StandardCharsets.UTF_8).toString();
        final String v3 = Hashing.sha512().hashString((CharSequence)v2, StandardCharsets.UTF_8).toString();
        return v3;
    }
    
    private static boolean f(final String v) {
        final String v2 = d();
        final String v3 = i(v2);
        return v3.equalsIgnoreCase(v);
    }
    
    private static void y() {
        if (!f(e.f)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + e.f);
            FMLLog.log.info("HWID: " + d());
            m.bt = true;
            throw new f.b.q.l.o("Invalid License");
        }
    }
}
